# example for contract interface interation

## start a new node
gnoland start

# add grc20faucet
gnokey maketx addpkg -pkgdir $WORK/grc20faucet -pkgpath gno.land/r/grc20faucet -gas-fee 1000000ugnot -gas-wanted 2000000 -broadcast -chainid=tendermint_test test1

# we call TransferByName with bar20, before it's registered to grc20faucet
gnokey maketx call -pkgpath gno.land/r/grc20faucet -func TransferByName -args 'Bar' -gas-fee 1000000ugnot -gas-wanted 2000000 -broadcast -chainid=tendermint_test test1
stdout 'not found'

# add bar20
gnokey maketx addpkg -pkgdir $WORK/bar20 -pkgpath gno.land/r/bar20 -gas-fee 1000000ugnot -gas-wanted 2000000 -broadcast -chainid=tendermint_test test1

# print bar20 balances
gnokey maketx call -pkgpath gno.land/r/bar20 -func Balances -gas-fee 1000000ugnot -gas-wanted 2000000 -broadcast -chainid=tendermint_test test1
stdout 'faucet=1000000BAR test1=0BAR'

# we call TransferByName with bar20, after it's registered
gnokey maketx call -pkgpath gno.land/r/grc20faucet -func TransferByName -args 'Bar' -gas-fee 1000000ugnot -gas-wanted 2000000 -broadcast -chainid=tendermint_test test1
stdout '1000BAR transfered to g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5'

# print bar20 balances
gnokey maketx call -pkgpath gno.land/r/bar20 -func Balances -gas-fee 1000000ugnot -gas-wanted 2000000 -broadcast -chainid=tendermint_test test1
stdout 'faucet=999000BAR test1=1000BAR'

-- grc20faucet/faucet.gno --
package grc20faucet

import (
	"gno.land/p/demo/grc/grc20"
	"gno.land/p/demo/ufmt"
	"std"
)

type pair struct {
	name  string
	grc20 grc20.IGRC20
}

var registry []grc20.IGRC20

func Register(grc20 grc20.IGRC20) {
	registry = append(registry, grc20)
}

func TransferByName(name string) string {
	amount := uint64(1000)
	for _, grc20 := range registry {
		if grc20.GetName() == name {
			println("XXXXXXXXX TRANSFER")
			err := grc20.Transfer(std.GetOrigCaller(), amount)
			if err != nil {
				panic(err)
			}
			return ufmt.Sprintf("%d%s transfered to %s", amount, grc20.GetSymbol(), std.GetOrigCaller().String())
		}
	}
	return "not found"
}
-- bar20/bar20.gno --
package bar20

import (
	"gno.land/p/demo/grc/grc20"
	"gno.land/p/demo/ufmt"
	"gno.land/r/grc20faucet"
	"std"
)

var (
	// token Token
	bar = &token{
		admin: grc20.NewAdminToken("Bar", "BAR", 4),
	}
	faucetAdr = std.DerivePkgAddr("gno.land/r/grc20faucet")
)

func init() {
	println(">>>> INIT")
	defer println("<<<< INIT")
	bar.admin.Mint(faucetAdr, 1000000)
	// token.bar = grc20.NewAdminToken("Bar", "BAR", 4)
	// token.IGRC20=token.bar.GRC20()
	grc20faucet.Register(bar)
}

// token implements the IGRC20 interface.
//
// It is generated by token.GRC20().
// It can safely be explosed publicly.
type token struct {
	grc20.IGRC20 // implements the GRC20 interface.
	admin        *grc20.AdminToken
}

// IGRC20 implementation.
//

func (t *token) GetName() string     { return t.admin.GetName() }
func (t *token) GetSymbol() string   { return t.admin.GetSymbol() }
func (t *token) GetDecimals() uint   { return t.admin.GetDecimals() }
func (t *token) TotalSupply() uint64 { return t.admin.TotalSupply() }

func (t *token) BalanceOf(owner std.Address) (uint64, error) {
	return t.admin.BalanceOf(owner)
}

func (t *token) Transfer(to std.Address, amount uint64) error {
	owner := std.PrevRealm().Addr()
	return t.admin.Transfer(owner, to, amount)
}

func (t *token) Allowance(owner, spender std.Address) (uint64, error) {
	return t.admin.Allowance(owner, spender)
}

func (t *token) Approve(spender std.Address, amount uint64) error {
	owner := std.PrevRealm().Addr()
	return t.admin.Approve(owner, spender, amount)
}

func (t *token) TransferFrom(from, to std.Address, amount uint64) error {
	owner := std.PrevRealm().Addr()
	return t.admin.TransferFrom(owner, from, to, amount)
}

// Return faucet and user balance
func Balances() string {
	faucetBalance, err := bar.BalanceOf(faucetAdr)
	if err != nil {
		panic(err)
	}
	test1Adr := std.Address("g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5")
	test1Balance, err := bar.BalanceOf(test1Adr)
	if err != nil {
		panic(err)
	}
	return ufmt.Sprintf("faucet=%d%s test1=%d%s", faucetBalance, bar.GetSymbol(),
		test1Balance, bar.GetSymbol())
}
